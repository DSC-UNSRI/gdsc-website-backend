// Code generated by MockGen. DO NOT EDIT.
// Source: ./init.go

// Package mock_generation_usecase is a generated GoMock package.
package mock_generation_usecase

import (
	reflect "reflect"

	model "github.com/DSC-UNSRI/gdsc-website-backend/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockGenerationUsecase is a mock of GenerationUsecase interface.
type MockGenerationUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGenerationUsecaseMockRecorder
}

// MockGenerationUsecaseMockRecorder is the mock recorder for MockGenerationUsecase.
type MockGenerationUsecaseMockRecorder struct {
	mock *MockGenerationUsecase
}

// NewMockGenerationUsecase creates a new mock instance.
func NewMockGenerationUsecase(ctrl *gomock.Controller) *MockGenerationUsecase {
	mock := &MockGenerationUsecase{ctrl: ctrl}
	mock.recorder = &MockGenerationUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerationUsecase) EXPECT() *MockGenerationUsecaseMockRecorder {
	return m.recorder
}

// CreateGeneration mocks base method.
func (m *MockGenerationUsecase) CreateGeneration(arg0 model.CreateGenerationRequest) model.WebServiceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGeneration", arg0)
	ret0, _ := ret[0].(model.WebServiceResponse)
	return ret0
}

// CreateGeneration indicates an expected call of CreateGeneration.
func (mr *MockGenerationUsecaseMockRecorder) CreateGeneration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGeneration", reflect.TypeOf((*MockGenerationUsecase)(nil).CreateGeneration), arg0)
}

// DeleteGeneration mocks base method.
func (m *MockGenerationUsecase) DeleteGeneration(arg0 model.DeleteGenerationRequest) model.WebServiceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGeneration", arg0)
	ret0, _ := ret[0].(model.WebServiceResponse)
	return ret0
}

// DeleteGeneration indicates an expected call of DeleteGeneration.
func (mr *MockGenerationUsecaseMockRecorder) DeleteGeneration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGeneration", reflect.TypeOf((*MockGenerationUsecase)(nil).DeleteGeneration), arg0)
}

// GetActiveGeneration mocks base method.
func (m *MockGenerationUsecase) GetActiveGeneration() model.WebServiceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveGeneration")
	ret0, _ := ret[0].(model.WebServiceResponse)
	return ret0
}

// GetActiveGeneration indicates an expected call of GetActiveGeneration.
func (mr *MockGenerationUsecaseMockRecorder) GetActiveGeneration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveGeneration", reflect.TypeOf((*MockGenerationUsecase)(nil).GetActiveGeneration))
}

// ListGenerations mocks base method.
func (m *MockGenerationUsecase) ListGenerations(arg0 model.ListGenerationRequest) model.WebServiceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGenerations", arg0)
	ret0, _ := ret[0].(model.WebServiceResponse)
	return ret0
}

// ListGenerations indicates an expected call of ListGenerations.
func (mr *MockGenerationUsecaseMockRecorder) ListGenerations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGenerations", reflect.TypeOf((*MockGenerationUsecase)(nil).ListGenerations), arg0)
}

// UpdateGeneration mocks base method.
func (m *MockGenerationUsecase) UpdateGeneration(arg0 model.UpdateGenerationRequest) model.WebServiceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGeneration", arg0)
	ret0, _ := ret[0].(model.WebServiceResponse)
	return ret0
}

// UpdateGeneration indicates an expected call of UpdateGeneration.
func (mr *MockGenerationUsecaseMockRecorder) UpdateGeneration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGeneration", reflect.TypeOf((*MockGenerationUsecase)(nil).UpdateGeneration), arg0)
}
