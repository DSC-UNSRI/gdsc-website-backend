// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package postgresql

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, birthdate) VALUES ($1, $2) RETURNING uuid, name, birthdate
`

type CreateUserParams struct {
	Name      string    `json:"name"`
	Birthdate time.Time `json:"birthdate"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Birthdate)
	var i User
	err := row.Scan(&i.Uuid, &i.Name, &i.Birthdate)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT uuid, name, birthdate FROM users LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.Uuid, &i.Name, &i.Birthdate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
