// Code generated by sqlc. DO NOT EDIT.
// source: settings.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
)

const createSetting = `-- name: CreateSetting :one
INSERT INTO settings (value, related_id, setting_type)
	VALUES (STRING_NULL_OR_TRUNCATE($1), $2, $3)
RETURNING
	value, related_id, setting_type
`

type CreateSettingParams struct {
	Value       string
	Relatedid   uuid.NullUUID
	Settingtype SettingType
}

func (q *Queries) CreateSetting(ctx context.Context, arg CreateSettingParams) (Setting, error) {
	row := q.db.QueryRow(ctx, createSetting, arg.Value, arg.Relatedid, arg.Settingtype)
	var i Setting
	err := row.Scan(&i.Value, &i.RelatedID, &i.SettingType)
	return i, err
}

const getSetting = `-- name: GetSetting :one
SELECT
	value, related_id, setting_type
FROM
	settings
WHERE
	setting_type = $1
`

func (q *Queries) GetSetting(ctx context.Context, settingtype SettingType) (Setting, error) {
	row := q.db.QueryRow(ctx, getSetting, settingtype)
	var i Setting
	err := row.Scan(&i.Value, &i.RelatedID, &i.SettingType)
	return i, err
}

const updateSetting = `-- name: UpdateSetting :one
UPDATE
	settings
SET
	value = STRING_NULL_OR_TRUNCATE($1),
	related_id = $2,
	setting_type = $3
RETURNING
	value, related_id, setting_type
`

type UpdateSettingParams struct {
	Value       string
	Relatedid   uuid.NullUUID
	Settingtype SettingType
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) (Setting, error) {
	row := q.db.QueryRow(ctx, updateSetting, arg.Value, arg.Relatedid, arg.Settingtype)
	var i Setting
	err := row.Scan(&i.Value, &i.RelatedID, &i.SettingType)
	return i, err
}
