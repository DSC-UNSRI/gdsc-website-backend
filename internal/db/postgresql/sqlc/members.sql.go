// Code generated by sqlc. DO NOT EDIT.
// source: members.sql

package postgresql

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMember = `-- name: CreateMember :one
INSERT INTO MEMBERS (full_name, university, role_id, division_id, picture_path)
	VALUES ($1, $2, $3, $4, $5)
RETURNING
	id, full_name, university, role_id, division_id, picture_path, created_at, deleted_at
`

type CreateMemberParams struct {
	FullName    string
	University  string
	RoleID      uuid.UUID
	DivisionID  uuid.NullUUID
	PicturePath sql.NullString
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRow(ctx, createMember,
		arg.FullName,
		arg.University,
		arg.RoleID,
		arg.DivisionID,
		arg.PicturePath,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.University,
		&i.RoleID,
		&i.DivisionID,
		&i.PicturePath,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM members
WHERE id = $1
`

func (q *Queries) DeleteMember(ctx context.Context, memberid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMember, memberid)
	return err
}

const getMember = `-- name: GetMember :one
SELECT
	id, full_name, university, role_id, division_id, picture_path, created_at, deleted_at
FROM
	members
WHERE
	id = $1
`

func (q *Queries) GetMember(ctx context.Context, memberid uuid.UUID) (Member, error) {
	row := q.db.QueryRow(ctx, getMember, memberid)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.University,
		&i.RoleID,
		&i.DivisionID,
		&i.PicturePath,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listMembers = `-- name: ListMembers :many
SELECT
	id, full_name, university, role_id, division_id, picture_path, created_at, deleted_at
FROM
	members
LIMIT $1 OFFSET $2
`

type ListMembersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListMembers(ctx context.Context, arg ListMembersParams) ([]Member, error) {
	rows, err := q.db.Query(ctx, listMembers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Member{}
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.University,
			&i.RoleID,
			&i.DivisionID,
			&i.PicturePath,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMember = `-- name: UpdateMember :one
UPDATE
	members
SET
	full_name = $1,
	university = $2,
	role_id = $3,
	division_id = $4,
	picture_path = $5
RETURNING
	id, full_name, university, role_id, division_id, picture_path, created_at, deleted_at
`

type UpdateMemberParams struct {
	Name        string
	University  string
	Roleid      uuid.UUID
	Divisionid  uuid.NullUUID
	Picturepath sql.NullString
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) (Member, error) {
	row := q.db.QueryRow(ctx, updateMember,
		arg.Name,
		arg.University,
		arg.Roleid,
		arg.Divisionid,
		arg.Picturepath,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.University,
		&i.RoleID,
		&i.DivisionID,
		&i.PicturePath,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
