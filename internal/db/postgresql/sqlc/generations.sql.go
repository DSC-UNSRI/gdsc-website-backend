// Code generated by sqlc. DO NOT EDIT.
// source: generations.sql

package postgresql

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createGeneration = `-- name: CreateGeneration :one
INSERT INTO generations (year)
	VALUES ($1::varchar(4))
RETURNING
	id, year, created_at, FALSE AS active
`

type CreateGenerationRow struct {
	ID        uuid.UUID
	Year      string
	CreatedAt time.Time
	Active    bool
}

func (q *Queries) CreateGeneration(ctx context.Context, year string) (CreateGenerationRow, error) {
	row := q.db.QueryRow(ctx, createGeneration, year)
	var i CreateGenerationRow
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.CreatedAt,
		&i.Active,
	)
	return i, err
}

const deleteGeneration = `-- name: DeleteGeneration :execrows
DELETE FROM generations
WHERE id = $1
`

func (q *Queries) DeleteGeneration(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteGeneration, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getActiveGeneration = `-- name: GetActiveGeneration :one
SELECT
	id, year, created_at,
	TRUE AS active
FROM
	GET_ACTIVE_GENERATION()
`

type GetActiveGenerationRow struct {
	ID        uuid.UUID
	Year      string
	CreatedAt time.Time
	Active    bool
}

func (q *Queries) GetActiveGeneration(ctx context.Context) (GetActiveGenerationRow, error) {
	row := q.db.QueryRow(ctx, getActiveGeneration)
	var i GetActiveGenerationRow
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.CreatedAt,
		&i.Active,
	)
	return i, err
}

const getGeneration = `-- name: GetGeneration :one
SELECT
	g.id, g.year, g.created_at,
	CASE WHEN g.id = (
		SELECT
			s.related_id
		FROM
			settings s
		WHERE
			s.setting_type = 'active_generation'
		LIMIT 1) THEN
		TRUE
	ELSE
		FALSE
	END AS active
FROM
	generations g
WHERE
	id = $1
LIMIT 1
`

type GetGenerationRow struct {
	ID        uuid.UUID
	Year      string
	CreatedAt time.Time
	Active    bool
}

func (q *Queries) GetGeneration(ctx context.Context, id uuid.UUID) (GetGenerationRow, error) {
	row := q.db.QueryRow(ctx, getGeneration, id)
	var i GetGenerationRow
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.CreatedAt,
		&i.Active,
	)
	return i, err
}

const listGeneration = `-- name: ListGeneration :many
SELECT
	g.id,
	g.year,
	g.created_at,
	CASE WHEN a.id = g.id THEN
		TRUE
	ELSE
		FALSE
	END AS active
FROM
	generations g
	LEFT JOIN GET_ACTIVE_GENERATION() a ON g.id = a.id
LIMIT $1 offset $2
`

type ListGenerationParams struct {
	Limit  int32
	Offset int32
}

type ListGenerationRow struct {
	ID        uuid.UUID
	Year      string
	CreatedAt time.Time
	Active    bool
}

func (q *Queries) ListGeneration(ctx context.Context, arg ListGenerationParams) ([]ListGenerationRow, error) {
	rows, err := q.db.Query(ctx, listGeneration, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListGenerationRow{}
	for rows.Next() {
		var i ListGenerationRow
		if err := rows.Scan(
			&i.ID,
			&i.Year,
			&i.CreatedAt,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setActiveGeneration = `-- name: SetActiveGeneration :one
WITH activeGen AS (
	UPDATE
		settings s
	SET
		related_id = $1
	WHERE
		s.setting_type = 'active_generation'
	RETURNING
		value, related_id, setting_type
)
SELECT
	g.id, g.year, g.created_at,
	TRUE AS active
FROM
	generations g,
	activeGen
WHERE
	g.id = activeGen.related_id
`

type SetActiveGenerationRow struct {
	ID        uuid.UUID
	Year      string
	CreatedAt time.Time
	Active    bool
}

func (q *Queries) SetActiveGeneration(ctx context.Context, generationid uuid.NullUUID) (SetActiveGenerationRow, error) {
	row := q.db.QueryRow(ctx, setActiveGeneration, generationid)
	var i SetActiveGenerationRow
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.CreatedAt,
		&i.Active,
	)
	return i, err
}

const updateGeneration = `-- name: UpdateGeneration :one
UPDATE
	generations
SET
	year = $1::varchar(4)
WHERE
	id = $2
RETURNING
	id, year, created_at,
	(
		CASE WHEN (
			SELECT
				id
			FROM
				GET_ACTIVE_GENERATION()) = id THEN
			TRUE
		ELSE
			FALSE
		END) AS ACTIVE
`

type UpdateGenerationParams struct {
	Year         string
	Generationid uuid.UUID
}

type UpdateGenerationRow struct {
	ID        uuid.UUID
	Year      string
	CreatedAt time.Time
	Active    bool
}

func (q *Queries) UpdateGeneration(ctx context.Context, arg UpdateGenerationParams) (UpdateGenerationRow, error) {
	row := q.db.QueryRow(ctx, updateGeneration, arg.Year, arg.Generationid)
	var i UpdateGenerationRow
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.CreatedAt,
		&i.Active,
	)
	return i, err
}
