// Code generated by sqlc. DO NOT EDIT.
// source: roles.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (name)
	VALUES ($1::varchar(255))
RETURNING
	id, name, created_at
`

func (q *Queries) CreateRole(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, name)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteRole = `-- name: DeleteRole :execrows
DELETE FROM roles
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, roleid uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteRole, roleid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getRole = `-- name: GetRole :one
SELECT
	id, name, created_at
FROM
	roles
WHERE
	id = $1
`

func (q *Queries) GetRole(ctx context.Context, roleid uuid.UUID) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, roleid)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listRole = `-- name: ListRole :many
SELECT
	id, name, created_at
FROM
	roles
LIMIT $1 OFFSET $2
`

type ListRoleParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListRole(ctx context.Context, arg ListRoleParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRole, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE
	roles
SET
	name = $1
WHERE
	id = $2
RETURNING
	id, name, created_at
`

type UpdateRoleParams struct {
	Name   string
	Roleid uuid.UUID
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole, arg.Name, arg.Roleid)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
