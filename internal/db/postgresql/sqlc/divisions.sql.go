// Code generated by sqlc. DO NOT EDIT.
// source: divisions.sql

package postgresql

import (
	"context"
	"errors"

	"github.com/google/uuid"
)

const createDivision = `-- name: CreateDivision :one
INSERT INTO divisions (name)
	VALUES ($1::varchar(255))
RETURNING
	id, name, created_at
`

func (q *Queries) CreateDivision(ctx context.Context, name string) (Division, error) {
	row := q.db.QueryRow(ctx, createDivision, name)
	var i Division
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteDivision = `-- name: DeleteDivision :execrows
DELETE FROM divisions
WHERE id = $1
`

func (q *Queries) DeleteDivision(ctx context.Context, divisionID uuid.UUID) (error) {
	
	division,err := q.GetDivision(ctx, divisionID)
	if division.Name != ""{
		q.db.Exec(ctx, deleteDivision, divisionID)
		return err
	}
	err = errors.New("invalid division id")
	return  err
}

const getDivision = `-- name: GetDivision :one
SELECT
	id, name, created_at
FROM
	divisions
WHERE
	id = $1
LIMIT 1
`

func (q *Queries) GetDivision(ctx context.Context, divisionid uuid.UUID) (Division, error) {
	row := q.db.QueryRow(ctx, getDivision, divisionid)
	var i Division
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listDivisions = `-- name: ListDivisions :many
SELECT
	id, name, created_at
FROM
	divisions
LIMIT $1 OFFSET $2
`

type ListDivisionsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListDivisions(ctx context.Context, arg ListDivisionsParams) ([]Division, error) {
	rows, err := q.db.Query(ctx, listDivisions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Division{}
	for rows.Next() {
		var i Division
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDivision = `-- name: UpdateDivision :one
UPDATE
	divisions
SET
	name = $1
WHERE
	id = $2
RETURNING
	id, name, created_at
`

type UpdateDivisionParams struct {
	Name       string
	Divisionid uuid.UUID
}

func (q *Queries) UpdateDivision(ctx context.Context, arg UpdateDivisionParams) (Division, error) {
	row := q.db.QueryRow(ctx, updateDivision, arg.Name, arg.Divisionid)
	var i Division
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
