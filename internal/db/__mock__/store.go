// Code generated by MockGen. DO NOT EDIT.
// Source: ./store.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	postgresql "github.com/DSC-UNSRI/gdsc-website-backend/internal/db/postgresql/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateDivision mocks base method.
func (m *MockStore) CreateDivision(ctx context.Context, name string) (postgresql.Division, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDivision", ctx, name)
	ret0, _ := ret[0].(postgresql.Division)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDivision indicates an expected call of CreateDivision.
func (mr *MockStoreMockRecorder) CreateDivision(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDivision", reflect.TypeOf((*MockStore)(nil).CreateDivision), ctx, name)
}

// CreateMember mocks base method.
func (m *MockStore) CreateMember(ctx context.Context, arg postgresql.CreateMemberParams) (postgresql.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", ctx, arg)
	ret0, _ := ret[0].(postgresql.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockStoreMockRecorder) CreateMember(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockStore)(nil).CreateMember), ctx, arg)
}

// DeleteDivision mocks base method.
func (m *MockStore) DeleteDivision(ctx context.Context, divisionID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDivision", ctx, divisionID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDivision indicates an expected call of DeleteDivision.
func (mr *MockStoreMockRecorder) DeleteDivision(ctx, divisionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDivision", reflect.TypeOf((*MockStore)(nil).DeleteDivision), ctx, divisionID)
}

// DeleteMember mocks base method.
func (m *MockStore) DeleteMember(ctx context.Context, memberid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", ctx, memberid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockStoreMockRecorder) DeleteMember(ctx, memberid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockStore)(nil).DeleteMember), ctx, memberid)
}

// GetDivision mocks base method.
func (m *MockStore) GetDivision(ctx context.Context, divisionid uuid.UUID) (postgresql.Division, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDivision", ctx, divisionid)
	ret0, _ := ret[0].(postgresql.Division)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDivision indicates an expected call of GetDivision.
func (mr *MockStoreMockRecorder) GetDivision(ctx, divisionid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDivision", reflect.TypeOf((*MockStore)(nil).GetDivision), ctx, divisionid)
}

// GetMember mocks base method.
func (m *MockStore) GetMember(ctx context.Context, memberid uuid.UUID) (postgresql.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember", ctx, memberid)
	ret0, _ := ret[0].(postgresql.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember.
func (mr *MockStoreMockRecorder) GetMember(ctx, memberid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockStore)(nil).GetMember), ctx, memberid)
}

// ListDivisions mocks base method.
func (m *MockStore) ListDivisions(ctx context.Context, arg postgresql.ListDivisionsParams) ([]postgresql.Division, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDivisions", ctx, arg)
	ret0, _ := ret[0].([]postgresql.Division)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDivisions indicates an expected call of ListDivisions.
func (mr *MockStoreMockRecorder) ListDivisions(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDivisions", reflect.TypeOf((*MockStore)(nil).ListDivisions), ctx, arg)
}

// ListMembers mocks base method.
func (m *MockStore) ListMembers(ctx context.Context, arg postgresql.ListMembersParams) ([]postgresql.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", ctx, arg)
	ret0, _ := ret[0].([]postgresql.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockStoreMockRecorder) ListMembers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockStore)(nil).ListMembers), ctx, arg)
}

// UpdateDivision mocks base method.
func (m *MockStore) UpdateDivision(ctx context.Context, arg postgresql.UpdateDivisionParams) (postgresql.Division, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDivision", ctx, arg)
	ret0, _ := ret[0].(postgresql.Division)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDivision indicates an expected call of UpdateDivision.
func (mr *MockStoreMockRecorder) UpdateDivision(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDivision", reflect.TypeOf((*MockStore)(nil).UpdateDivision), ctx, arg)
}

// UpdateMember mocks base method.
func (m *MockStore) UpdateMember(ctx context.Context, arg postgresql.UpdateMemberParams) (postgresql.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMember", ctx, arg)
	ret0, _ := ret[0].(postgresql.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMember indicates an expected call of UpdateMember.
func (mr *MockStoreMockRecorder) UpdateMember(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMember", reflect.TypeOf((*MockStore)(nil).UpdateMember), ctx, arg)
}
